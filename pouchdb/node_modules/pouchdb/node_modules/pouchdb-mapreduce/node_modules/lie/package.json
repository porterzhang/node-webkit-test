{
  "name": "lie",
  "version": "2.5.3",
  "description": "A minimal and fast promise implementation",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/calvinmetcalf/lie.git"
  },
  "bugs": {
    "url": "https://github.com/calvinmetcalf/lie/issues"
  },
  "keywords": [
    "lie",
    "promise",
    "async"
  ],
  "main": "lib/lie.js",
  "scripts": {
    "test": "./node_modules/istanbul/lib/cli.js test ./node_modules/promises-aplus-tests/lib/cli.js ./test/cover.js"
  },
  "jam": {
    "main": "dist/lie.js",
    "include": [
      "README.md",
      "LICENSE.txt",
      "dist/lie.js"
    ]
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-contrib-uglify": "~0.2.2",
    "promises-aplus-tests": "~1.3.2",
    "browserify": "~2.35.0",
    "grunt-browserify": "~1.2.9",
    "istanbul": "~0.1.44"
  },
  "dependencies": {
    "immediate": "~2.6.1"
  },
  "contributors": [
    {
      "name": "Ruben Verborgh",
      "email": "ruben.verborgh@gmail.com"
    },
    {
      "name": "Calvin Metcalf",
      "email": "calvin.metcalf@gmail.com"
    }
  ],
  "readme": "# lie\n<a href=\"http://promises-aplus.github.com/promises-spec\">\n  <img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\"\n       alt=\"Promises/A+ logo\" title=\"Promises/A+ 1.0 compliant\" align=\"right\" />\n</a>\n\nlie is a JavaScript promise/deferred implementation, implementing the [Promises/A+ spec](http://promises-aplus.github.com/promises-spec/), with the goal of implementing the spec as closely as possible and nothing else,\nthis means created promises only have a then method and promises may only be created by passing a resolver function to the constructor.  Lie is not meant to compete with Q, When, or any of the other promise libraries\nthat already exist, it is meant to be a library you could use to create a [Q](https://github.com/kriskowal/q) or [When](https://github.com/cujojs/when) style tool belt, which I did [over here](https://github.com/calvinmetcalf/liar).\n\nA fork of [Ruben Verborgh's](https://github.com/RubenVerborgh) library called [promiscuous](https://github.com/RubenVerborgh/promiscuous).\nWhich takes advantage of my [immediate library](https://github.com/calvinmetcalf/setImmediate), uses object constructors, and with a name I can actually consistently spell. \nPlus if I learned anything from [catiline](https://github.com/calvinmetcalf/catiline) (formally communist) it's that you don't want to pick an even mildly offensive name.\n\n## API\n\nby defailt adds a function called 'Promise' to the global scope (or if you grab the noConflict version than one called lie)\n\n### return a promise\n```javascript\nfunction waitAwhile(){\n\treturn promise(function(resolve,reject){\n\t    doSomething(functin(err,result){\n\t        if(err){\n\t            reject(err);\n\t        }else{\n\t            resolve(result);\n\t        }\n\t    });\n\t});\n}\n```\n\n### Write a function turns node style callback to promises\n```javascript\nfunction denodify(func){\n    return function() {\n        var args = Array.prototype.concat.apply([], arguments);\n        return promise(function(resolve, reject) {\n            args.push(function(err, success) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(success);\n                }\n            });\n            func.apply(undefined, args);\n        });\n    };\n};\n```\n\n##node\n\ninstall with `npm install lie`, exactly the same as above but \n\n```javascript\nvar promise = require('lie');\n```\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/calvinmetcalf/lie",
  "_id": "lie@2.5.3",
  "_from": "lie@~2.5.1"
}
